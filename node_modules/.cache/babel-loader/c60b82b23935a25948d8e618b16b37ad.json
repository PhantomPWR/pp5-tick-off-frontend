{"ast":null,"code":"import { R as RequestHandler, h as cleanUrl, i as getSearchParams, d as devUtils, m as matchRequestUrl, g as getPublicUrlFromRequest, j as prepareRequest, k as prepareResponse, n as getStatusCodeColor, o as getTimestamp } from './RequestHandler-deps.js';\nimport { b as set, s as status, d as cookie, g as json, e as delay, f as fetch } from './fetch-deps.js';\nimport { b as body, t as text, x as xml } from './xml-deps.js';\n\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\nfunction isStringEqual(actual, expected) {\n  return actual.toLowerCase() === expected.toLowerCase();\n}\nvar RESTMethods;\n(function (RESTMethods) {\n  RESTMethods[\"HEAD\"] = \"HEAD\";\n  RESTMethods[\"GET\"] = \"GET\";\n  RESTMethods[\"POST\"] = \"POST\";\n  RESTMethods[\"PUT\"] = \"PUT\";\n  RESTMethods[\"PATCH\"] = \"PATCH\";\n  RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\n  RESTMethods[\"DELETE\"] = \"DELETE\";\n})(RESTMethods || (RESTMethods = {}));\nconst restContext = {\n  set,\n  status,\n  cookie,\n  body,\n  text,\n  json,\n  xml,\n  delay,\n  fetch\n};\n/**\r\n * Request handler for REST API requests.\r\n * Provides request matching based on method and URL.\r\n */\nclass RestHandler extends RequestHandler {\n  constructor(method, path, resolver) {\n    super({\n      info: {\n        header: `${method} ${path}`,\n        path,\n        method\n      },\n      ctx: restContext,\n      resolver\n    });\n    this.checkRedundantQueryParameters();\n  }\n  checkRedundantQueryParameters() {\n    const {\n      method,\n      path\n    } = this.info;\n    if (path instanceof RegExp) {\n      return;\n    }\n    const url = cleanUrl(path);\n    // Bypass request handler URLs that have no redundant characters.\n    if (url === path) {\n      return;\n    }\n    const searchParams = getSearchParams(path);\n    const queryParams = [];\n    searchParams.forEach((_, paramName) => {\n      queryParams.push(paramName);\n    });\n    devUtils.warn(`\\\nFound a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead, and access query parameters in the response resolver function:\n\nrest.${method.toLowerCase()}(\"${url}\", (req, res, ctx) => {\n  const query = req.url.searchParams\n${queryParams.map(paramName => `\\\n  const ${paramName} = query.get(\"${paramName}\")`).join('\\n')}\n})\\\n      `);\n  }\n  parse(request, resolutionContext) {\n    return matchRequestUrl(request.url, this.info.path, resolutionContext === null || resolutionContext === void 0 ? void 0 : resolutionContext.baseUrl);\n  }\n  getPublicRequest(request, parsedResult) {\n    return Object.assign(Object.assign({}, request), {\n      params: parsedResult.params || {}\n    });\n  }\n  predicate(request, parsedResult) {\n    return isStringEqual(this.info.method, request.method) && parsedResult.matches;\n  }\n  log(request, response) {\n    const publicUrl = getPublicUrlFromRequest(request);\n    const loggedRequest = prepareRequest(request);\n    const loggedResponse = prepareResponse(response);\n    const statusColor = getStatusCodeColor(response.status);\n    console.groupCollapsed(devUtils.formatMessage('%s %s %s (%c%s%c)'), getTimestamp(), request.method, publicUrl, `color:${statusColor}`, `${response.status} ${response.statusText}`, 'color:inherit');\n    console.log('Request', loggedRequest);\n    console.log('Handler:', {\n      mask: this.info.path,\n      resolver: this.resolver\n    });\n    console.log('Response', loggedResponse);\n    console.groupEnd();\n  }\n}\nfunction createRestHandler(method) {\n  return (path, resolver) => {\n    return new RestHandler(method, path, resolver);\n  };\n}\nconst rest = {\n  head: createRestHandler(RESTMethods.HEAD),\n  get: createRestHandler(RESTMethods.GET),\n  post: createRestHandler(RESTMethods.POST),\n  put: createRestHandler(RESTMethods.PUT),\n  delete: createRestHandler(RESTMethods.DELETE),\n  patch: createRestHandler(RESTMethods.PATCH),\n  options: createRestHandler(RESTMethods.OPTIONS)\n};\nexport { RestHandler as R, RESTMethods as a, restContext as b, isStringEqual as i, rest as r };","map":{"version":3,"names":["R","RequestHandler","h","cleanUrl","i","getSearchParams","d","devUtils","m","matchRequestUrl","g","getPublicUrlFromRequest","j","prepareRequest","k","prepareResponse","n","getStatusCodeColor","o","getTimestamp","b","set","s","status","cookie","json","e","delay","f","fetch","body","t","text","x","xml","isStringEqual","actual","expected","toLowerCase","RESTMethods","restContext","RestHandler","constructor","method","path","resolver","info","header","ctx","checkRedundantQueryParameters","RegExp","url","searchParams","queryParams","forEach","_","paramName","push","warn","map","join","parse","request","resolutionContext","baseUrl","getPublicRequest","parsedResult","Object","assign","params","predicate","matches","log","response","publicUrl","loggedRequest","loggedResponse","statusColor","console","groupCollapsed","formatMessage","statusText","mask","groupEnd","createRestHandler","rest","head","HEAD","get","GET","post","POST","put","PUT","delete","DELETE","patch","PATCH","options","OPTIONS","a","r"],"sources":["/workspace/pp5-tick-off-frontend/node_modules/msw/lib/esm/rest-deps.js"],"sourcesContent":["import { R as RequestHandler, h as cleanUrl, i as getSearchParams, d as devUtils, m as matchRequestUrl, g as getPublicUrlFromRequest, j as prepareRequest, k as prepareResponse, n as getStatusCodeColor, o as getTimestamp } from './RequestHandler-deps.js';\nimport { b as set, s as status, d as cookie, g as json, e as delay, f as fetch } from './fetch-deps.js';\nimport { b as body, t as text, x as xml } from './xml-deps.js';\n\n/**\r\n * Performs a case-insensitive comparison of two given strings.\r\n */\r\nfunction isStringEqual(actual, expected) {\r\n    return actual.toLowerCase() === expected.toLowerCase();\r\n}\n\nvar RESTMethods;\r\n(function (RESTMethods) {\r\n    RESTMethods[\"HEAD\"] = \"HEAD\";\r\n    RESTMethods[\"GET\"] = \"GET\";\r\n    RESTMethods[\"POST\"] = \"POST\";\r\n    RESTMethods[\"PUT\"] = \"PUT\";\r\n    RESTMethods[\"PATCH\"] = \"PATCH\";\r\n    RESTMethods[\"OPTIONS\"] = \"OPTIONS\";\r\n    RESTMethods[\"DELETE\"] = \"DELETE\";\r\n})(RESTMethods || (RESTMethods = {}));\r\nconst restContext = {\r\n    set,\r\n    status,\r\n    cookie,\r\n    body,\r\n    text,\r\n    json,\r\n    xml,\r\n    delay,\r\n    fetch,\r\n};\r\n/**\r\n * Request handler for REST API requests.\r\n * Provides request matching based on method and URL.\r\n */\r\nclass RestHandler extends RequestHandler {\r\n    constructor(method, path, resolver) {\r\n        super({\r\n            info: {\r\n                header: `${method} ${path}`,\r\n                path,\r\n                method,\r\n            },\r\n            ctx: restContext,\r\n            resolver,\r\n        });\r\n        this.checkRedundantQueryParameters();\r\n    }\r\n    checkRedundantQueryParameters() {\r\n        const { method, path } = this.info;\r\n        if (path instanceof RegExp) {\r\n            return;\r\n        }\r\n        const url = cleanUrl(path);\r\n        // Bypass request handler URLs that have no redundant characters.\r\n        if (url === path) {\r\n            return;\r\n        }\r\n        const searchParams = getSearchParams(path);\r\n        const queryParams = [];\r\n        searchParams.forEach((_, paramName) => {\r\n            queryParams.push(paramName);\r\n        });\r\n        devUtils.warn(`\\\nFound a redundant usage of query parameters in the request handler URL for \"${method} ${path}\". Please match against a path instead, and access query parameters in the response resolver function:\n\nrest.${method.toLowerCase()}(\"${url}\", (req, res, ctx) => {\n  const query = req.url.searchParams\n${queryParams\r\n            .map((paramName) => `\\\n  const ${paramName} = query.get(\"${paramName}\")`)\r\n            .join('\\n')}\n})\\\n      `);\r\n    }\r\n    parse(request, resolutionContext) {\r\n        return matchRequestUrl(request.url, this.info.path, resolutionContext === null || resolutionContext === void 0 ? void 0 : resolutionContext.baseUrl);\r\n    }\r\n    getPublicRequest(request, parsedResult) {\r\n        return Object.assign(Object.assign({}, request), { params: parsedResult.params || {} });\r\n    }\r\n    predicate(request, parsedResult) {\r\n        return (isStringEqual(this.info.method, request.method) && parsedResult.matches);\r\n    }\r\n    log(request, response) {\r\n        const publicUrl = getPublicUrlFromRequest(request);\r\n        const loggedRequest = prepareRequest(request);\r\n        const loggedResponse = prepareResponse(response);\r\n        const statusColor = getStatusCodeColor(response.status);\r\n        console.groupCollapsed(devUtils.formatMessage('%s %s %s (%c%s%c)'), getTimestamp(), request.method, publicUrl, `color:${statusColor}`, `${response.status} ${response.statusText}`, 'color:inherit');\r\n        console.log('Request', loggedRequest);\r\n        console.log('Handler:', {\r\n            mask: this.info.path,\r\n            resolver: this.resolver,\r\n        });\r\n        console.log('Response', loggedResponse);\r\n        console.groupEnd();\r\n    }\r\n}\n\nfunction createRestHandler(method) {\r\n    return (path, resolver) => {\r\n        return new RestHandler(method, path, resolver);\r\n    };\r\n}\r\nconst rest = {\r\n    head: createRestHandler(RESTMethods.HEAD),\r\n    get: createRestHandler(RESTMethods.GET),\r\n    post: createRestHandler(RESTMethods.POST),\r\n    put: createRestHandler(RESTMethods.PUT),\r\n    delete: createRestHandler(RESTMethods.DELETE),\r\n    patch: createRestHandler(RESTMethods.PATCH),\r\n    options: createRestHandler(RESTMethods.OPTIONS),\r\n};\n\nexport { RestHandler as R, RESTMethods as a, restContext as b, isStringEqual as i, rest as r };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}